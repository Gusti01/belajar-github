//perintah dasar//

#git init
untuk menginisialisasi suatu folder untuk menjadi repository git, kita hanya tinggal menuju ke folder tujuan,
lalu klik kanan, klik git bash, dan akan terbuka terminal git.
setelah itu ketikkan perintah git init.
digunakan untuk menginisialisasi suatu folder sebagai repository git.

#menambahkan file
untuk menambahkan file ke repository, cukup dengan menambahkan file dalam folder saja.
secara otomatis file yang kita tambahkan akan berada pada working directory

#git status
digunakan untuk mengecek perubahan apa saja yang terjadi.

commit = riwayat perubahan yang disimpan

setelah menambahkan file, kita dapat mengecek status dari repo git kita dengan git status.
jika sebelumnya ada perubahan yang dilakukan namun belum di catat, maka akan muncul keterangan file yang untracked files

memindahkan file ke staging index
#git add nama_file
untuk spesifik menambahkan file atau perubahan yang terjadi ke staging index

atau 
#git add *
untuk secara keseluruhan menambahkan semua file atau perubahan yang ada ke staging index

atau jika ingin membatalkan pemindahan file ke staging index:
git rm --cached nama file

#menambahkan file ke repository (commit)
git commit -m "message"
setiap perubahan yang ingin disimpan ke repository perlu memiliki pesan,
sehingga nanti jika ingin kembali ke perubahan sebelumnya kita bisa mengidentifikasi dengan baik.
perintah di atas akan memindahkan semua file yang ada di staging index ke repository secara permanent
jadi setelah itu filenya atau perubahannya telah disimpan ke repository.

#mengubah file
jika melakukan perubahan file, hal ini dilakukan langsung saja pada file di working directory
secara langsung git akan mendeteksi perubahan yang terjadi
dan untuk menyimpan perubahannya sama seperti langkah di atas dengan memindahkannya dari working direktory
ke staging index, lalu menyimpannya ke repository

saat dilakukan git status, akan muncul status bahwa file telah di modifikasi
beda saat baru pertama kali menambah file, munculnya untracked,
jika kita modifikasi file yang sudah ada, munculnya modified.

#melihat perubahan yang terjadi pada file
digunakan perintah:
git diff

untuk menambahkan file satu-satu:
git add nama_file1 nama_file2 nama_file3 nama_file4 dst

untuk menambahkan file secara keseluruhan pada di staging area:
git add .


#menghapus file
untuk menghapus file cukup dengan menghapus file yang ada di working directory
secara otomatis git akan mendeteksi file yang hilang
lalu jika ingin menyimpan perubahannya secara permanent, kita perlu memindahkan ke staging index dan commit ke repository

#membatalkan penambahan file baru pada working directory
sebenarnya sama seperti sebelumnya, cukup menghapus file yang ada di working directory
namun jika file terlalu banyak dan sulit untuk menghapus 1 per 1, bisa digunakan:
git clean -f
untuk menghapus semua file yang ditambahkan di working directory. ini saat file masih berada pada working directory

#membatalkan perubahan file yang yang telah dilakukan
menggunakan perintah:
git restore nama_file
pada saat berada di working directory

#membatalkan penghapusan file yang telah dilakukan
juga menggunakan perintah:
git restore nama_file_yang_dihapus
pada saat berada pada working directory

karena git restore hanya berlaku di working directory, maka diperlukan:
#membatalkan file yang ada di staging index
menggunakan perintah:
git restore --staged nama_file

setelah itu baru bisa gunakan git restore lagi.

#membatalkan perubahan yang sudah terlanjur di commit
tidak ada cara yang bisa kita lakukan untuk restore jika perubahan sudah terlanjur di commit
yang bisa kita lakukan hanyalah rollback commit(reset) atau revert commit
atau bisa dibilang kita kembali ke titik commit sebelumnya

#commit log
git adalah distributed version control, artinya walaupun repository ada di lokal komputer, semua riwayat perubahan disimpan di komputer kita
kekurangannya lama kelamaan repository akan semakin besar ukurannya, namun keuntungannya, kita bisa melihat semua riwayat commit atau disebut commit log
kita bisa melihat commit log dengan perintah:
git log

jadi git log digunakan untuk melihat semua history yg ada
yang memiliki tanda head -> master merupakan commit terbaru
q untuk keluar

untuk menjadikan log terlihat sederhana/menjadi lebih ringkas
git log --oneline

#graph
saat branching kadang kita ingin melihat commit log dengan hubungannya dengan commit log sebelumnya
hal ini bisa dilakukan dengan perintah:
git log --oneline --graph

#melihat detail commit
jadi jika anda ingin melihat perubahan apa yang dilakukan pada suatu commit
gunakan perintah:
git show hash

atau untuk melihat detail perubahan dari HEAD bisa menggunakan:
git show HEAD

#compare commit
fitur untuk membandingkan antara commit dengan commit lainnya.
namun bukan membandingkan perubahan datanya tapi membandingkan hasil commit.
gunakan perintah:
git diff hash1 hash2
jadi perintah ini digunakan untuk melihat hasil perubahan pada tiap file yang ada di commit

#git difftool
sebelumnya pada file configuration mengatur visual studio code untuk melihat diff
jadi jika ingin melihat perbedaan commit dengan vsc kita bisa gunakan perintah:
git difftool hash1 hash2
